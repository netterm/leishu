import { Plugin } from 'vite';

/**
 * @default 'head-prepend'
 */
declare type OptionalInjectTo = 'head' | 'body' | 'head-prepend' | 'body-prepend';
/**
 * HTML标签注入的位置 // Location of HTML tags injection
 * @default 'head-prepend'
 * @description
 * - injectTo优先级从高到低排序：module > config
 * - The injectTo priority is sorted from high to low: module > config
 * - 'head' - 在head标签的末尾注入 // Inject at the end of the head tag
 * - 'body' - 在body标签的末尾注入 // Inject at the end of the head tag
 * - 'head-prepend' - 在head标签的开头注入 // Inject at the start of the head tag
 * - 'body-prepend' - 在body标签的开头注入 // Inject at the start of the body tag
 * - string - 自定义占位符：替换index.html中第一个匹配的自定义占位符 // Custom placeholder: Replace the first matching custom placeholder in index.html
 * @example
 * '<!-- Custom placeholder for vite-plugin-inject-externals -->'
 */
declare type InjectTo = OptionalInjectTo | string;
/**
 * @property tag HTML标签名 // HTML tag name
 * @property attrs HTML标签属性 // HTML tag attributes
 */
declare type HtmlTag = {
    tag: keyof HTMLElementTagNameMap;
    attrs?: Record<string, string | boolean | undefined>;
};
declare type HtmlTagDesc = HtmlTag & {
    injectTo?: OptionalInjectTo;
};
/**
 * @property name 模块名 // Module name
 * @property global 全局变量名 // Global variable name
 * @property path CDN链接 // CDN link
 * @property injectTo HTML标签注入的位置 // Location of HTML tags injection
 * @property htmlTag HTML标签的描述信息，path属性会被覆盖 // Descriptor of an HTML tag, and the path attribute will be overwritten
 */
declare type InjectExternalsModule = {
    name?: string;
    global?: string;
    path?: string;
    htmlTag?: HtmlTag;
    injectTo?: InjectTo;
};
/**
 * 运行哪个命令时插入HTML标签 // Inject HTML tag when running which command
 * @default 'build'
 * @example
 * 'build' - when running build
 * true - 'build' or 'serve'
 */
declare type ConfigEnvCommand = 'build' | true;
/**
 * @property command 运行哪个命令时插入HTML标签 // Inject HTML tag when running which command
 * @property injectTo HTML标签注入的位置 // Location of HTML tags injection
 * @property modules 模块配置数组 // Module array
 */
declare type InjectExternalsConfig = {
    command?: ConfigEnvCommand;
    injectTo?: InjectTo;
    modules: InjectExternalsModule[];
};
declare const injectExternals: (config: InjectExternalsConfig) => Plugin;

export { ConfigEnvCommand, HtmlTag, HtmlTagDesc, InjectExternalsConfig, InjectExternalsModule, InjectTo, OptionalInjectTo, injectExternals as default };
