// src/index.ts
import externalGlobals from "rollup-plugin-external-globals";
var injectToRegExp = /^(head|body|head-prepend|body-prepend)$/;
var singleTags = /* @__PURE__ */ new Set(["br", "hr", "img", "input", "param", "meta", "link"]);
var createTag = (htmlTag) => {
  if (!htmlTag)
    return "";
  let { tag, attrs } = htmlTag;
  if (!tag)
    return "";
  if (!attrs)
    attrs = {};
  let htmlTagStr = `<${tag}`;
  for (const attrsKey in attrs) {
    htmlTagStr += ` ${attrsKey}`;
    if (attrs[attrsKey] === false || attrs[attrsKey])
      htmlTagStr += `="${attrs[attrsKey]}"`;
  }
  htmlTagStr += `>`;
  if (!singleTags.has(tag))
    htmlTagStr += `</${tag}>`;
  return htmlTagStr;
};
var initHtmlTag = (moduleInfo) => {
  let htmlTagInjectTo = void 0;
  if (injectToRegExp.test(moduleInfo.injectTo))
    htmlTagInjectTo = moduleInfo.injectTo;
  let htmlTag;
  if (moduleInfo.htmlTag) {
    htmlTag = moduleInfo.htmlTag;
    if (htmlTagInjectTo) {
      htmlTag.injectTo = htmlTagInjectTo;
    }
    return htmlTag;
  }
  if (moduleInfo.name && moduleInfo.global) {
    htmlTag = {
      tag: "script",
      attrs: {
        type: "text/javascript",
        src: moduleInfo.path,
        crossorigin: ""
      }
    };
  } else {
    htmlTag = {
      tag: "link",
      attrs: {
        rel: "stylesheet",
        href: moduleInfo.path,
        crossorigin: ""
      }
    };
  }
  if (htmlTagInjectTo)
    htmlTag.injectTo = htmlTagInjectTo;
  return htmlTag;
};
var injectExternals = (config) => {
  let { command, injectTo, modules } = config;
  if (!command)
    command = "build";
  if (!injectTo)
    injectTo = "head-prepend";
  if (!modules || !Array.isArray(modules)) {
    modules = [];
  }
  let canIInject = command === true;
  let strTagsData = /* @__PURE__ */ new Map();
  let htmlTags = [];
  let globalsOption = {};
  let customModules = [];
  let optionalModules = [];
  for (let moduleItem of modules) {
    if (moduleItem.name)
      globalsOption[moduleItem.name] = moduleItem.global || "noGlobal&deleteThisImport";
    if (!moduleItem.path && !moduleItem.htmlTag)
      continue;
    if (!moduleItem.injectTo)
      moduleItem.injectTo = injectTo;
    if (injectToRegExp.test(moduleItem.injectTo)) {
      optionalModules.push(moduleItem);
    } else {
      customModules.push(moduleItem);
    }
  }
  for (const customModule of customModules) {
    let htmlTag = initHtmlTag(customModule);
    let htmlTagArr;
    if (Array.isArray(strTagsData.get(customModule.injectTo))) {
      htmlTagArr = strTagsData.get(customModule.injectTo);
    } else {
      htmlTagArr = [];
      strTagsData.set(customModule.injectTo, htmlTagArr);
    }
    if (htmlTag.tag === "link") {
      htmlTagArr.unshift(createTag(htmlTag));
    } else {
      htmlTagArr.push(createTag(htmlTag));
    }
    strTagsData.set(customModule.injectTo, htmlTagArr);
  }
  for (const optionalModule of optionalModules) {
    let htmlTag = initHtmlTag(optionalModule);
    if (htmlTag.tag === "link") {
      htmlTags.unshift(htmlTag);
    } else {
      htmlTags.push(htmlTag);
    }
  }
  return {
    name: "vite-plugin-inject-externals",
    config(uc, { command: viteCommand }) {
      const userConfig = {
        build: {
          rollupOptions: {}
        }
      };
      if (viteCommand === "build") {
        canIInject = true;
        userConfig.build.rollupOptions = {
          plugins: [externalGlobals(globalsOption)]
        };
      }
      return userConfig;
    },
    transformIndexHtml(html) {
      let newHtml = html;
      const pattern = /<head>\r?\n+\s*</;
      const execArr = pattern.exec(newHtml);
      let spaceStr = "";
      if (execArr) {
        let [val] = execArr;
        val = val.substring(6, val.length - 1);
        spaceStr = val.replace(/\r/g, "").replace(/\n/g, "");
      }
      let joinStr = spaceStr ? `
${spaceStr}` : "\n  ";
      for (const [key, strTagSet] of strTagsData) {
        newHtml = newHtml.replace(key, strTagSet.join(joinStr));
      }
      if (canIInject) {
        return {
          html: newHtml,
          tags: htmlTags
        };
      } else {
        return html;
      }
    }
  };
};
var src_default = injectExternals;
export {
  src_default as default
};
