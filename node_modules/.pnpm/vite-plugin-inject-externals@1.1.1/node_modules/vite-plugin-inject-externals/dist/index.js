var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
var import_rollup_plugin_external_globals = __toESM(require("rollup-plugin-external-globals"));
var injectToRegExp = /^(head|body|head-prepend|body-prepend)$/;
var singleTags = /* @__PURE__ */ new Set(["br", "hr", "img", "input", "param", "meta", "link"]);
var createTag = (htmlTag) => {
  if (!htmlTag)
    return "";
  let { tag, attrs } = htmlTag;
  if (!tag)
    return "";
  if (!attrs)
    attrs = {};
  let htmlTagStr = `<${tag}`;
  for (const attrsKey in attrs) {
    htmlTagStr += ` ${attrsKey}`;
    if (attrs[attrsKey] === false || attrs[attrsKey])
      htmlTagStr += `="${attrs[attrsKey]}"`;
  }
  htmlTagStr += `>`;
  if (!singleTags.has(tag))
    htmlTagStr += `</${tag}>`;
  return htmlTagStr;
};
var initHtmlTag = (moduleInfo) => {
  let htmlTagInjectTo = void 0;
  if (injectToRegExp.test(moduleInfo.injectTo))
    htmlTagInjectTo = moduleInfo.injectTo;
  let htmlTag;
  if (moduleInfo.htmlTag) {
    htmlTag = moduleInfo.htmlTag;
    if (htmlTagInjectTo) {
      htmlTag.injectTo = htmlTagInjectTo;
    }
    return htmlTag;
  }
  if (moduleInfo.name && moduleInfo.global) {
    htmlTag = {
      tag: "script",
      attrs: {
        type: "text/javascript",
        src: moduleInfo.path,
        crossorigin: ""
      }
    };
  } else {
    htmlTag = {
      tag: "link",
      attrs: {
        rel: "stylesheet",
        href: moduleInfo.path,
        crossorigin: ""
      }
    };
  }
  if (htmlTagInjectTo)
    htmlTag.injectTo = htmlTagInjectTo;
  return htmlTag;
};
var injectExternals = (config) => {
  let { command, injectTo, modules } = config;
  if (!command)
    command = "build";
  if (!injectTo)
    injectTo = "head-prepend";
  if (!modules || !Array.isArray(modules)) {
    modules = [];
  }
  let canIInject = command === true;
  let strTagsData = /* @__PURE__ */ new Map();
  let htmlTags = [];
  let globalsOption = {};
  let customModules = [];
  let optionalModules = [];
  for (let moduleItem of modules) {
    if (moduleItem.name)
      globalsOption[moduleItem.name] = moduleItem.global || "noGlobal&deleteThisImport";
    if (!moduleItem.path && !moduleItem.htmlTag)
      continue;
    if (!moduleItem.injectTo)
      moduleItem.injectTo = injectTo;
    if (injectToRegExp.test(moduleItem.injectTo)) {
      optionalModules.push(moduleItem);
    } else {
      customModules.push(moduleItem);
    }
  }
  for (const customModule of customModules) {
    let htmlTag = initHtmlTag(customModule);
    let htmlTagArr;
    if (Array.isArray(strTagsData.get(customModule.injectTo))) {
      htmlTagArr = strTagsData.get(customModule.injectTo);
    } else {
      htmlTagArr = [];
      strTagsData.set(customModule.injectTo, htmlTagArr);
    }
    if (htmlTag.tag === "link") {
      htmlTagArr.unshift(createTag(htmlTag));
    } else {
      htmlTagArr.push(createTag(htmlTag));
    }
    strTagsData.set(customModule.injectTo, htmlTagArr);
  }
  for (const optionalModule of optionalModules) {
    let htmlTag = initHtmlTag(optionalModule);
    if (htmlTag.tag === "link") {
      htmlTags.unshift(htmlTag);
    } else {
      htmlTags.push(htmlTag);
    }
  }
  return {
    name: "vite-plugin-inject-externals",
    config(uc, { command: viteCommand }) {
      const userConfig = {
        build: {
          rollupOptions: {}
        }
      };
      if (viteCommand === "build") {
        canIInject = true;
        userConfig.build.rollupOptions = {
          plugins: [(0, import_rollup_plugin_external_globals.default)(globalsOption)]
        };
      }
      return userConfig;
    },
    transformIndexHtml(html) {
      let newHtml = html;
      const pattern = /<head>\r?\n+\s*</;
      const execArr = pattern.exec(newHtml);
      let spaceStr = "";
      if (execArr) {
        let [val] = execArr;
        val = val.substring(6, val.length - 1);
        spaceStr = val.replace(/\r/g, "").replace(/\n/g, "");
      }
      let joinStr = spaceStr ? `
${spaceStr}` : "\n  ";
      for (const [key, strTagSet] of strTagsData) {
        newHtml = newHtml.replace(key, strTagSet.join(joinStr));
      }
      if (canIInject) {
        return {
          html: newHtml,
          tags: htmlTags
        };
      } else {
        return html;
      }
    }
  };
};
var src_default = injectExternals;
module.exports = __toCommonJS(src_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
